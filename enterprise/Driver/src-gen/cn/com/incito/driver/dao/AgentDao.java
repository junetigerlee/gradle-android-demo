package cn.com.incito.driver.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.com.incito.driver.dao.Agent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AGENT.
*/
public class AgentDao extends AbstractDao<Agent, Long> {

    public static final String TABLENAME = "AGENT";

    /**
     * Properties of entity Agent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MId = new Property(1, String.class, "mId", false, "mId");
        public final static Property Agentno = new Property(2, String.class, "agentno", false, "agentno");
        public final static Property Tel = new Property(3, String.class, "tel", false, "tel");
        public final static Property Company = new Property(4, String.class, "company", false, "company");
        public final static Property Address = new Property(5, String.class, "address", false, "address");
        public final static Property Name = new Property(6, String.class, "name", false, "name");
        public final static Property Location = new Property(7, String.class, "location", false, "location");
        public final static Property Photo = new Property(8, String.class, "photo", false, "photo");
        public final static Property Status = new Property(9, String.class, "status", false, "status");
        public final static Property AgentLevel = new Property(10, String.class, "agentLevel", false, "agentLevel");
        public final static Property Createtime = new Property(11, Long.class, "createtime", false, "createtime");
    };


    public AgentDao(DaoConfig config) {
        super(config);
    }
    
    public AgentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AGENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'mId' TEXT," + // 1: mId
                "'agentno' TEXT," + // 2: agentno
                "'tel' TEXT," + // 3: tel
                "'company' TEXT," + // 4: company
                "'address' TEXT," + // 5: address
                "'name' TEXT," + // 6: name
                "'location' TEXT," + // 7: location
                "'photo' TEXT," + // 8: photo
                "'status' TEXT," + // 9: status
                "'agentLevel' TEXT," + // 10: agentLevel
                "'createtime' INTEGER);"); // 11: createtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AGENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Agent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mId = entity.getMId();
        if (mId != null) {
            stmt.bindString(2, mId);
        }
 
        String agentno = entity.getAgentno();
        if (agentno != null) {
            stmt.bindString(3, agentno);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(4, tel);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(5, company);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(8, location);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String agentLevel = entity.getAgentLevel();
        if (agentLevel != null) {
            stmt.bindString(11, agentLevel);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(12, createtime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Agent readEntity(Cursor cursor, int offset) {
        Agent entity = new Agent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // agentno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // company
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // location
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // agentLevel
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // createtime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Agent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAgentno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompany(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAgentLevel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreatetime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Agent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Agent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
